#| fig.height: 6
#| out.width: "85%"
tam <- 1000
k <- ceiling(1 + log2(tam))
a <- 1
b <- 15
#------------------------------------------------------------------------------
# assimetria positiva
amostra <- rbeta(tam, shape1 = a, shape2 = b)
p1 <- ggplot(tibble(x = amostra)) +
geom_histogram(aes(x = x, y = after_stat(density)),
bins = k, fill = "blue") +
theme_gdocs() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "X", y = "Densidade de\n frequência",
title = "Assimetria à direita ou positiva")
p2 <- ggplot(tibble(x = amostra)) +
geom_boxplot(aes(x = "", y = x), outlier.shape = NA) +
theme_calc() +
scale_x_discrete(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "X", title = "Assimetria à direira ou positiva")
#------------------------------------------------------------------------------
# assimetria negativa
amostra <- rbeta(tam, shape1 = b, shape2 = a)
n1 <- ggplot(tibble(x = amostra)) +
geom_histogram(aes(x = x, y = after_stat(density)),
bins = k, fill = "blue") +
theme_gdocs() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "X", y = "Densidade de\n frequência",
title = "Assimetria à esquerda ou negativa")
n2 <- ggplot(tibble(x = amostra)) +
geom_boxplot(aes(x = "", y = x), outlier.shape = NA) +
theme_calc() +
scale_x_discrete(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "X",
title = "Assimetria à esquerda ou negativa")
#------------------------------------------------------------------------------
# simetria
amostra <- rbeta(tam, shape1 = 5, shape2 = 5)
s1 <- ggplot(tibble(x = amostra)) +
geom_histogram(aes(x = x, y = after_stat(density)),
bins = k, fill = "blue") +
theme_gdocs() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "X", y = "Densidade de\n frequência",
title = "Simetria")
s2 <- ggplot(tibble(x = amostra)) +
geom_boxplot(aes(x = "", y = x), outlier.shape = NA) +
theme_calc() +
scale_x_discrete(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "X",
title = "Simetria")
p1 + p2 + n1 + n2 + s1 + s2 + plot_layout(nrow = 3, byrow =  TRUE)
#| out.width: 85%
ggplot(dados_iris) +
geom_boxplot(aes(x = "", y = comprimento_sepala)) +
labs(x = "", y = "Comprimento de Sépala") +
theme_minimal()
#| out.width: 100%
#| echo: false
sepala <- ggplot(dados_iris) +
geom_boxplot(aes(x = "", y = comprimento_sepala)) +
labs(x = "", y = "Comprimento de Sépala") +
ylim(c(0, 10)) +
theme_minimal()
petala <- ggplot(dados_iris) +
geom_boxplot(aes(x = "", y = comprimento_petala)) +
labs(x = "", y = "Comprimento de Pétala") +
ylim(c(0, 10)) +
theme_minimal()
sepala + petala
#| echo: false
#| out.width: 100%
ggplot(dados_iris) +
geom_boxplot(aes(x = especies, y = comprimento_sepala)) +
labs(x = "", y = "Comprimento de Sépala") +
ylim(c(0, 10)) +
theme_minimal()
alpha <- c(2, 2)
beta <- c(6, 0.8)
amostrador <- function(n) {
indices <- sample.int(2, n, TRUE, prob = c(0.5, 0.5))
indices |> map_dbl(\(k) {
20 * rbeta(1, alpha[k], beta[k]) - 10
})
}
n <- 1000
dados <- tibble(
bimodal = amostrador(n),
uniforme = runif(n, -10, 10),
normal = rnorm(n, 0, sqrt(54.95))
)
#| echo: false
#| out-width: 75%
bimodal <- ggplot(dados, aes(x = "")) +
geom_boxplot(aes(y = bimodal)) + theme_minimal() +
ylim(c(-10, 10))
uniforme <- ggplot(dados, aes(x = "")) +
geom_boxplot(aes(y = uniforme)) + theme_minimal() +
ylim(c(-10, 10))
normal <- ggplot(dados, aes(x = "")) +
geom_boxplot(aes(y = normal)) + theme_minimal() +
ylim(c(-10, 10))
bimodal + uniforme + normal
ggplot(dados_iris, aes(x = especies, y = comprimento_petala)) +
geom_boxplot(width = 0.02) +
geom_violin()
ggplot(dados_iris, aes(x = especies, y = comprimento_petala)) +
geom_violin() +
geom_boxplot(width = 0.02)
ggplot(dados_iris, aes(x = especies, y = comprimento_petala)) +
geom_violin() +
geom_boxplot(width = 0.2)
ggplot(dados_iris, aes(x = especies, y = comprimento_petala)) +
geom_violin() +
geom_boxplot(width = 0.1)
ggplot(dados_iris, aes(x = especies, y = comprimento_petala)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme_minimal()
ggplot(dados_iris, aes(x = especies, y = comprimento_petala)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme_minimal() +
labs(x = "Espécies", y = "Comprimento de pétala")
View(petala)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache = TRUE,
fig.align = "center", out.width="50%")
#rmarkdown::find_pandoc(dir = "/home/gilberto/.local/bin", version = "2.13")
library(glue)
library(readxl)
library(writexl)
library(janitor)
library(dplyr)
library(gt)
library(ggthemes)
library(statBasics)
library(MASS)
library(readODS)
library(dados)
library(patchwork)
library(aplpack)
library(tidyverse)
# Chunk 2
#| echo: true
#| eval: false
help(mean)
?mean
# Chunk 3
1 + 1
# Chunk 4
2 - 1
# Chunk 5
3 / 2
# Chunk 6
2^3
# Chunk 7
class(1L)
# Chunk 8
class(1.2)
# Chunk 9
class(1 + 1i)
# Chunk 10
class(TRUE)
# Chunk 11
class("Gilberto")
# Chunk 12
nomes  <- c("Gilberto", "Sassi")
class(nomes)
nomes
# Chunk 13
texto_vazio <- vector("character", 3)
class(texto_vazio)
texto_vazio
# Chunk 14
vetor_real  <- c(0.2, 1.35)
class(vetor_real)
vetor_real
# Chunk 15
vetor_real <- vector("double", 3)
vetor_real
# Chunk 16
vetor_real <- seq(from = 1, to = 3.5, by = 0.5)
vetor_real
# Chunk 17
vetor_inteiro  <- c(1L, 2L)
class(vetor_inteiro)
vetor_inteiro
# Chunk 18
vetor_inteiro <- vector("integer", 3)
vetor_inteiro
# Chunk 19
vetor_inteiro <- 1:4
vetor_inteiro
# Chunk 20
vetor_real  <- seq_along(nomes)
class(vetor_real)
vetor_real
# Chunk 21
vetor_real <- seq_len(5)
class(vetor_real)
vetor_real
# Chunk 22
vetor_logico  <- c(TRUE, FALSE)
class(vetor_logico)
vetor_logico
# Chunk 23
vetor_logico <- vector("logical", 3)
vetor_logico
# Chunk 24
vetor <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
# selecionado todos os elementos entre o primeiro e o quinta
vetor[1:5]
# Chunk 25
vetor_1 <- 1:5
vetor_2 <- 6:10
vetor_1 + vetor_2
# Chunk 26
vetor_1 <- 1:5
vetor_2 <- 6:10
vetor_2 - vetor_1
# Chunk 27
vetor_1 <- 1:5
vetor_2 <- 6:10
vetor_2 * vetor_1
# Chunk 28
vetor_1 <- 1:5
vetor_2 <- 6:10
vetor_2 / vetor_1
# Chunk 29
matriz_texto <- rbind(c("a", "b"), c("c", "d"))
matriz_texto
# Chunk 30
matriz_real <- matrix(seq(from = 0, to = 1.5, by = 0.5),
nrow = 2, byrow = TRUE)
matriz_real
# Chunk 31
matriz_inteiro <- cbind(c(1L, 2L), c(3L, 4L))
matriz_inteiro
# Chunk 32
matriz_logico <- matrix(c(TRUE, F, F, T), nrow = 2)
matriz_logico
# Chunk 33
#| echo: true
#| eval: false
dados_matriz_1 <- 10:13
dados_matriz_2  <- 14:17
resultado <- array(c(dados_matriz_1, dados_matriz_2),
dim = c(2, 2, 2))
resultado
# Chunk 34
#| echo: false
#| eval: true
dados_matriz_1 <- 10:13
dados_matriz_2  <- 14:17
resultado <- array(c(dados_matriz_1, dados_matriz_2), dim = c(2, 2, 2))
resultado
# Chunk 35
matriz_a <- rbind(c(1, 2), c(0, 3))
matriz_b <- matrix(runif(4), ncol = 2)
# Chunk 36
matriz_soma <- matriz_a + matriz_b
matriz_soma
# Chunk 37
matriz_menos <- matriz_a - matriz_b
matriz_menos
# Chunk 38
matriz_hadamard <- matriz_a * matriz_b
matriz_hadamard
# Chunk 39
matriz_multiplicacao <- matriz_a %*% matriz_b
matriz_multiplicacao
# Chunk 40
matriz_inversa <- solve(matriz_a)
matriz_inversa
matriz_a %*% matriz_inversa
# Chunk 41
matriz_transposta <- t(matriz_a)
matriz_transposta
# Chunk 42
det(matriz_a)
# Chunk 43
b <- c(1, 2)
solve(matriz_a, b)
# Chunk 44
library(MASS) # ginv é uma função do pacote MASS
ginv(matriz_a)
# Chunk 45
#| echo: true
#| eval: false
lista_info <- list(pedido_id = 8001406,
nome = "Fulano",
sobrenome = "de Tal",
cpf = "12345678900",
itens = list(list(descricao = "Ferrari",
frete = 0,
valor = 500000),
list(descricao = "Dolly", frete = 1.5,
valor = 3.90)))
lista_info
# Chunk 46
#| echo: false
#| eval: true
lista_info <- list(pedido_id = 8001406,
nome = "Fulano",
sobrenome = "de Tal",
cpf = "12345678900",
itens = list(list(descricao = "Ferrari",
frete = 0,
valor = 500000),
list(descricao = "Dolly", frete = 1.5, valor = 3.90)))
lista_info
# Chunk 47
lista_info[c(2, 4)]
# Chunk 48
lista_info[[2]]
# Chunk 49
lista_info$nome
# Chunk 50
lista_1 <- list(1, 2)
lista_2 <- list("Gilberto", "Sassi")
lista_concatenada <- c(lista_1, lista_2)
lista_concatenada
# Chunk 51
library(tidyverse) # carregando o framework tidyverse
data_frame <- tibble(
nome = c("Marx", "Engels", "Rosa", "Lênin", "Olga Benário"),
idade = c(22, 23, 21, 24, 30)
)
glimpse(data_frame)
# Chunk 52
head(data_frame, n=2)
# Chunk 53
tail(data_frame, n=2)
# Chunk 54
#| echo: false
df_equipe <- tibble(
nomes = c("Fidel Castro", "Ernesto 'Che' Guevara", "Célia Sánchez"),
origem = c("Cuba", "Cuba", "Cuba")
)
knitr::kable(df_equipe)
# Chunk 55
library(tidyverse)
library(readxl)
dados_iris <- read_xlsx("dados/brutos/iris.xlsx")
dados_iris <- clean_names(dados_iris)
glimpse(dados_iris)
# Chunk 56
dados_mtcarros <- read_csv2("dados/brutos/mtcarros.csv")
dados_mtcarros <- clean_names(dados_mtcarros)
glimpse(dados_mtcarros)
# Chunk 57
library(readODS)
dados_dentes <- read_ods("dados/brutos/crescimento_dentes.ods")
dados_dentes <- clean_names(dados_dentes)
glimpse(dados_dentes)
# Chunk 61
dados_iris <- read_xlsx("dados/brutos/iris.xlsx")
tab <- tabyl(dados_iris, especies)  |>
adorn_totals()  |>
adorn_pct_formatting(digits = 2) |>
rename(
"Espécies" = especies, "Frequência" = n,
"Porcentagem" = percent
)
tab
# Chunk 62
dados_mtcarros <- read_csv2("dados/brutos/mtcarros.csv")
tab <- tabyl(dados_mtcarros, carburadores)  |>
adorn_totals()  |>
adorn_pct_formatting(digits = 2) |>
rename(
"Carburadores" = carburadores, "Frequência" = n,
"Porcentagem" = percent
)
tab
# Chunk 63
k <- ceiling(1 + log(nrow(dados_iris)))
dados_iris2 <- mutate(
dados_iris,
comprimento_sepala_int = cut(
comprimento_sepala,
breaks = k,
include.lowest = TRUE,
right = FALSE
)
)
glimpse(dados_iris2)
# Chunk 65
#| echo: false
tabyl(dados_iris2, comprimento_sepala_int) |>
adorn_totals() |>
adorn_pct_formatting(digits = 2) |>
rename(
"Comprimento de sépala" = comprimento_sepala_int,
"Frequência absoluta" = n,
"Porcentagem" = percent
)
# Chunk 66
ggplot(dados_iris) +
geom_bar(mapping = aes(especies), fill = "blue") +
labs(x = "Espécies", y = "Frequência") +
theme_minimal()
# Chunk 68
#| echo: false
tab <- tabyl(dados_mtcarros, carburadores) |>
adorn_totals() |>
adorn_pct_formatting(digits = 2) |>
rename(
"Número de carburadores" = carburadores,
"Frequência (absoluta)" = n,
"Porcentagem" = percent
)
tab
# Chunk 70
#| echo: false
#| out.width: 100%
ggplot(dados_mtcarros) +
geom_bar(
mapping = aes(carburadores, after_stat(100 * prop)),
fill = "#002f81"
) +
labs(x = "Número de carburadores", y = "Porcentagem") +
theme_minimal()
# Chunk 72
#| echo: false
#| out.width: 100%
ggplot(dados_iris) +
geom_histogram(
aes(x = comprimento_sepala, y = after_stat(density)),
bins = k,
fill = "#002f81"
) +
theme_minimal() +
labs(
x = "Comprimento de Sépala",
y = "Densidade de Frequência"
)
# Chunk 74
#| echo: false
#| out.width: 100%
ggplot(dados_iris, aes(x = comprimento_sepala, y = after_stat(density))) +
geom_histogram(
bins = k,
fill = "#002f81"
) +
geom_density(size = 2, color = "red") +
theme_minimal() +
labs(
x = "Comprimento de Sépala",
y = "Densidade de Frequência"
)
# Chunk 75
dados_iris |>
summarise(
media = mean(comprimento_sepala),
mediana = median(comprimento_sepala),
dp = sd(comprimento_sepala),
cv = dp / media
)
# Chunk 76
tabela <- dados_iris |>
group_by(especies) |>
summarise(
media = mean(comprimento_sepala),
mediana = median(comprimento_sepala),
dp = sd(comprimento_sepala),
cv = dp / media
)
tabela
# Chunk 77
dados_iris |>
group_by(especies) |>
summarise(
q1 = quantile(comprimento_sepala, 0.25),
q2 = quantile(comprimento_sepala, 0.5),
q3 = quantile(comprimento_sepala, 0.75),
frequencia = n()
)
# Chunk 78
#| echo: false
#| out.width: 25%
knitr::include_graphics("boxplot.png")
#| eval: false
dados_menstruacao <- read_csv("dados/brutos/menstruacao.csv")
stem.leaf(dados_menstruacao$, m=3)
glimpse(dados_menstruacao)
#| eval: false
dados_menstruacao <- read_csv("dados/brutos/menstruacao.csv")
glimpse(dados_menstruacao)
stem.leaf(dados_menstruacao$tamanho_ciclo, m=3)
stem.leaf(dados_menstruacao$tamanho_ciclo)
stem.leaf(dados_menstruacao$tamanho_ciclo, m=1)
stem.leaf(dados_menstruacao$tamanho_ciclo, m=0.5)
stem.leaf(dados_menstruacao$tamanho_ciclo, m=1)
stem.leaf(dados_menstruacao$tamanho_ciclo, m=2)
stem.leaf(dados_menstruacao$tamanho_ciclo, m=1)
stem.leaf(dados_menstruacao$tamanho_ciclo)
stem.leaf(rivers)
stem.leaf(rivers, m= 0.5)
stem.leaf(rivers, m= 2)
stem.leaf(rivers, m= 3)
stem.leaf(rivers, m= 4)
stem.leaf(rivers, m= 3)
