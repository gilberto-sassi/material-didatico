label = "tab:propelente", digits = 2,
align = rep("c", 3)) %>%
print.xtable(include.rownames = F, booktabs = T,
format.args = list(decimal.mark = ","))
dados %>% ggplot(aes(forca, idade)) +
geom_point(size = 4)+
# geom_line(stat = "smooth", method = "lm", size = 4, alpha = 0.35, color = "blue") +
labs(x = "Força (psi)", y = "Idade (semanas)") +
theme_minimal() +
theme(axis.title = element_text(size = 25),
axis.text = element_text(size = 20))
ggsave("../figure/dispersao.png")
ggsave("../figure/dispersao.pdf")
dados %>%
summarise(s_x = sum(idade), s_y = sum(forca), s_x2 = sum(idade^2),
s_y2 = sum(forca^2), s_xy = sum(forca * idade),
s_xx = sum( (idade - mean(idade))^2),
s_xxy = sum( (forca - mean(forca)) * (idade - mean(idade)) ),
media_x = mean(idade), media_y = mean(forca))
r <- with(dados, cor(forca, idade))
xi <- 0.5 * log((1 + r) / (1 - r))
lower <- (exp(2 * (-1.96 / sqrt(17) + xi)) - 1) / (exp(2 * (-1.96 / sqrt(17) + xi)) + 1)
upper <- (exp(2 * (1.96 / sqrt(17) + xi)) - 1) / (exp(2 * (1.96 / sqrt(17) + xi)) + 1)
ajuste <- lm(forca ~ 1 + idade, dados)
summary(ajuste)
d_ajuste <- broom::augment(ajuste)
s2 <- with(d_ajuste, sum(.resid^2 / (nrow(dados) - 2)))
# linearidade
d_ajuste %>% ggplot()+
geom_point(aes(x = idade, y = .resid), color = "blue", size = 2.5) +
labs(x = "Idade (x)", y = "Resíduos") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-linearity.png")
ggsave("../figure/exemplo-linearity.pdf")
# independência
d_ajuste %>% ggplot() +
geom_point(aes(x = idade, y = .std.resid), color = "blue", size = 2.5) +
ylim(c(min(-3, d_ajuste$.std.resid), max(3, d_ajuste$.std.resid))) +
geom_abline(intercept = -3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
geom_abline(intercept = 3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
theme_minimal() +
labs(x = "Idade (x)", y = "Resíduos") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-independence-outlier.png")
ggsave("../figure/exemplo-independence-outlier.pdf")
# normal probability graph
qqnorm(d_ajuste$.std.resid, plot.it = F) %>% as_tibble() %>%
ggplot() +
geom_point(aes(x, y), color = "blue", size = 2.5) +
geom_abline(intercept = 0, slope = 1, size = 2, alpha = 0.6) +
theme_minimal() +
ylim(c(-3, 3)) + xlim(c(-3, 3)) +
labs(x = "Quantis teóricos", y = "Quantis amostrais") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-normality.png")
ggsave("../figure/exemplo-normality.pdf")
# homoscedasticity
ggplot(d_ajuste) +
geom_point(aes(x = .resid, y = .fitted), color = "blue", size = 2.5) +
theme_minimal() +
labs(x = "Resíduos", y = "Valores ajustados") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-homo.png")
ggsave("../figure/exemplo-homo.pdf")
-3:3
# independência
d_ajuste %>% ggplot() +
geom_point(aes(x = idade, y = .std.resid), color = "blue", size = 2.5) +
scale_y_continuous(limits = c(min(-3, d_ajuste$.std.resid), max(3, d_ajuste$.std.resid)),
breaks = -3:3) +
geom_abline(intercept = -3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
geom_abline(intercept = 3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
theme_minimal() +
labs(x = "Idade (x)", y = "Resíduos") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
dados <- tribble(~forca, ~idade,
2158.70, 15.50,
1678.15, 23.75,
2316.00, 8.00,
2061.30, 17.00,
2207.50, 5.00,
1708.30, 19.00,
1784.70, 24.00,
2575.00, 2.50,
2357.90, 7.50,
2277.70, 11.00,
2165.20, 13.00,
2399.55, 3.75,
1779.80, 25.00,
2336.75, 9.75,
1765.30, 22.00,
2053.50, 18.00,
2414.40, 6.00,
2200.50, 12.50,
2654.20, 2.00,
1753.70, 21.50)
dados %>%
xtable(caption = "Dados sobre propelentes de foguetes.",
label = "tab:propelente", digits = 2,
align = rep("c", 3)) %>%
print.xtable(include.rownames = F, booktabs = T,
format.args = list(decimal.mark = ","))
dados %>% ggplot(aes(forca, idade)) +
geom_point(size = 4)+
# geom_line(stat = "smooth", method = "lm", size = 4, alpha = 0.35, color = "blue") +
labs(x = "Força (psi)", y = "Idade (semanas)") +
theme_minimal() +
theme(axis.title = element_text(size = 25),
axis.text = element_text(size = 20))
ggsave("../figure/dispersao.png")
ggsave("../figure/dispersao.pdf")
dados %>%
summarise(s_x = sum(idade), s_y = sum(forca), s_x2 = sum(idade^2),
s_y2 = sum(forca^2), s_xy = sum(forca * idade),
s_xx = sum( (idade - mean(idade))^2),
s_xxy = sum( (forca - mean(forca)) * (idade - mean(idade)) ),
media_x = mean(idade), media_y = mean(forca))
r <- with(dados, cor(forca, idade))
xi <- 0.5 * log((1 + r) / (1 - r))
lower <- (exp(2 * (-1.96 / sqrt(17) + xi)) - 1) / (exp(2 * (-1.96 / sqrt(17) + xi)) + 1)
upper <- (exp(2 * (1.96 / sqrt(17) + xi)) - 1) / (exp(2 * (1.96 / sqrt(17) + xi)) + 1)
ajuste <- lm(forca ~ 1 + idade, dados)
summary(ajuste)
d_ajuste <- broom::augment(ajuste)
s2 <- with(d_ajuste, sum(.resid^2 / (nrow(dados) - 2)))
# linearidade
d_ajuste %>% ggplot()+
geom_point(aes(x = idade, y = .resid), color = "blue", size = 2.5) +
labs(x = "Idade (x)", y = "Resíduos") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-linearity.png")
ggsave("../figure/exemplo-linearity.pdf")
# independência
d_ajuste %>% ggplot() +
geom_point(aes(x = idade, y = .std.resid), color = "blue", size = 2.5) +
scale_y_continuous(limits = c(min(-3, d_ajuste$.std.resid), max(3, d_ajuste$.std.resid)),
breaks = -3:3) +
geom_abline(intercept = -3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
geom_abline(intercept = 3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
theme_minimal() +
labs(x = "Idade (x)", y = "Resíduos") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-independence-outlier.png")
ggsave("../figure/exemplo-independence-outlier.pdf")
# normal probability graph
qqnorm(d_ajuste$.std.resid, plot.it = F) %>% as_tibble() %>%
ggplot() +
geom_point(aes(x, y), color = "blue", size = 2.5) +
geom_abline(intercept = 0, slope = 1, size = 2, alpha = 0.6) +
theme_minimal() +
ylim(c(-3, 3)) + xlim(c(-3, 3)) +
labs(x = "Quantis teóricos", y = "Quantis amostrais") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-normality.png")
ggsave("../figure/exemplo-normality.pdf")
# homoscedasticity
ggplot(d_ajuste) +
geom_point(aes(x = .resid, y = .fitted), color = "blue", size = 2.5) +
theme_minimal() +
labs(x = "Resíduos", y = "Valores ajustados") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-homo.png")
ggsave("../figure/exemplo-homo.pdf")
ajuste <- lm(forca ~ 1 + idade, dados)
summary(ajuste)
fit <- aov(forca ~ idade, data = dados)
fit
summary(fit)
dados <- tribble(~forca, ~idade,
2158.70, 15.50,
1678.15, 23.75,
2316.00, 8.00,
2061.30, 17.00,
2207.50, 5.00,
1708.30, 19.00,
1784.70, 24.00,
2575.00, 2.50,
2357.90, 7.50,
2277.70, 11.00,
2165.20, 13.00,
2399.55, 3.75,
1779.80, 25.00,
2336.75, 9.75,
1765.30, 22.00,
2053.50, 18.00,
2414.40, 6.00,
2200.50, 12.50,
2654.20, 2.00,
1753.70, 21.50)
dados %>%
xtable(caption = "Dados sobre propelentes de foguetes.",
label = "tab:propelente", digits = 2,
align = rep("c", 3)) %>%
print.xtable(include.rownames = F, booktabs = T,
format.args = list(decimal.mark = ","))
dados %>% ggplot(aes(forca, idade)) +
geom_point(size = 4)+
# geom_line(stat = "smooth", method = "lm", size = 4, alpha = 0.35, color = "blue") +
labs(x = "Força (psi)", y = "Idade (semanas)") +
theme_minimal() +
theme(axis.title = element_text(size = 25),
axis.text = element_text(size = 20))
ggsave("../figure/dispersao.png")
ggsave("../figure/dispersao.pdf")
dados %>%
summarise(s_x = sum(idade), s_y = sum(forca), s_x2 = sum(idade^2),
s_y2 = sum(forca^2), s_xy = sum(forca * idade),
s_xx = sum( (idade - mean(idade))^2),
s_xxy = sum( (forca - mean(forca)) * (idade - mean(idade)) ),
media_x = mean(idade), media_y = mean(forca))
r <- with(dados, cor(forca, idade))
xi <- 0.5 * log((1 + r) / (1 - r))
lower <- (exp(2 * (-1.96 / sqrt(17) + xi)) - 1) / (exp(2 * (-1.96 / sqrt(17) + xi)) + 1)
upper <- (exp(2 * (1.96 / sqrt(17) + xi)) - 1) / (exp(2 * (1.96 / sqrt(17) + xi)) + 1)
ajuste <- lm(forca ~ 1 + idade, dados)
summary(ajuste)
d_ajuste <- broom::augment(ajuste)
fit <- aov(forca ~ idade, data = dados)
summary(fit)
s2 <- with(d_ajuste, sum(.resid^2 / (nrow(dados) - 2)))
# linearidade
d_ajuste %>% ggplot()+
geom_point(aes(x = idade, y = .resid), color = "blue", size = 2.5) +
labs(x = "Idade (x)", y = "Resíduos") +
theme_minimal() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-linearity.png")
ggsave("../figure/exemplo-linearity.pdf")
# independência
d_ajuste %>% ggplot() +
geom_point(aes(x = idade, y = .std.resid), color = "blue", size = 2.5) +
scale_y_continuous(limits = c(min(-3, d_ajuste$.std.resid), max(3, d_ajuste$.std.resid)),
breaks = -3:3) +
geom_abline(intercept = -3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
geom_abline(intercept = 3, slope = 0, linetype = "dashed", size = 1, color = "#808080") +
theme_minimal() +
labs(x = "Idade (x)", y = "Resíduos padronizados") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-independence-outlier.png")
ggsave("../figure/exemplo-independence-outlier.pdf")
# normal probability graph
qqnorm(d_ajuste$.std.resid, plot.it = F) %>% as_tibble() %>%
ggplot() +
geom_point(aes(x, y), color = "blue", size = 2.5) +
geom_abline(intercept = 0, slope = 1, size = 2, alpha = 0.6) +
theme_minimal() +
ylim(c(-3, 3)) + xlim(c(-3, 3)) +
labs(x = "Quantis teóricos", y = "Quantis amostrais") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-normality.png")
ggsave("../figure/exemplo-normality.pdf")
# homoscedasticity
ggplot(d_ajuste) +
geom_point(aes(x = .resid, y = .fitted), color = "blue", size = 2.5) +
theme_minimal() +
labs(x = "Resíduos", y = "Valores ajustados") +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25))
ggsave("../figure/exemplo-homo.png")
ggsave("../figure/exemplo-homo.pdf")
df1 = 1
df2 = 18
xmax <- 8
z <- seq(from = 0, to = xmax, by = 0.0001)
y <- df(z, df1 = df1, df2 = df2)
dados <- tibble(z = z, y = y)
a <- 0.05
q <- qf(1 - a, df1 = df1, df2 = df2)
df1 = 1
df2 = 18
xmax <- 8
z <- seq(from = 0, to = xmax, by = 0.0001)
y <- df(z, df1 = df1, df2 = df2)
dados <- tibble(z = z, y = y)
a <- 0.05
q <- qf(1 - a, df1 = df1, df2 = df2)
ggplot(dados) +
geom_line(aes(x = z, y = y), color = "black", size = 1) +
labs(x = TeX("$F_0$"), y = "Função densidade",
title = TeX("Rejeitamos $H_0: b = 0$ se $f_0 > f_{1-\\alpha; a-1, N-a}$"),
subtitle = bquote("RC = {" ~ f[0] ~ " | " ~ f[0] > f[1-alpha~";"~a-1~","~N-a] ~ "}"),
caption = bquote(f[0] == frac(QM[Tratamentos], QM[E]) ~"e"~N == n %.% a)) +
scale_x_continuous(breaks = c(q),
labels = c(TeX("$f_{1-\\alpha; a-1, N-a}$"))) +
scale_y_continuous(breaks = NULL) +
geom_ribbon(data = dplyr::filter(dados, z > q),
aes(x = z, y = y, ymin = 0, ymax = y),
fill = "gray") +
theme_classic() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25),
title = element_text(size = 20)) +
geom_segment(x = -0.5, xend = q, y = 0.15, yend =0.15, size = 1, color = "blue") +
geom_segment(x = q, xend = xmax, y = 0.15, yend =0.15, size = 1, color = "red") +
geom_segment(x = q, xend = q, y = 0, yend = 0.15,
linetype = "dashed", color = "gray", size = 1) +
geom_point(data = tibble(x = c(q), y = c(0.15)),
aes(x = x, y = y), size = 5,color  = "gray") +
annotate("text", x = 1, y = 0.2, label = "H[0]",
size = 10, color = "blue", parse = T) +
annotate("text", x = 3.5, y = 0.2, label = "H[1]",
size = 10, color = "red", parse = T) +
annotate("text", x = 3.5, y = 0.075, label = "alpha", parse = T,
color = "gray", size = 10)
df1 = 4
df2 = 18
xmax <- 8
z <- seq(from = 0, to = xmax, by = 0.0001)
df1 = 4
df2 = 18
xmax <- 8
z <- seq(from = 0, to = xmax, by = 0.0001)
y <- df(z, df1 = df1, df2 = df2)
dados <- tibble(z = z, y = y)
a <- 0.05
q <- qf(1 - a, df1 = df1, df2 = df2)
ggplot(dados) +
geom_line(aes(x = z, y = y), color = "black", size = 1) +
labs(x = TeX("$F_0$"), y = "Função densidade",
title = TeX("Rejeitamos $H_0: b = 0$ se $f_0 > f_{1-\\alpha; a-1, N-a}$"),
subtitle = bquote("RC = {" ~ f[0] ~ " | " ~ f[0] > f[1-alpha~";"~a-1~","~N-a] ~ "}"),
caption = bquote(f[0] == frac(QM[Tratamentos], QM[E]) ~"e"~N == n %.% a)) +
scale_x_continuous(breaks = c(q),
labels = c(TeX("$f_{1-\\alpha; a-1, N-a}$"))) +
scale_y_continuous(breaks = NULL) +
geom_ribbon(data = dplyr::filter(dados, z > q),
aes(x = z, y = y, ymin = 0, ymax = y),
fill = "gray") +
theme_classic() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25),
title = element_text(size = 20)) +
geom_segment(x = -0.5, xend = q, y = 0.15, yend =0.15, size = 1, color = "blue") +
geom_segment(x = q, xend = xmax, y = 0.15, yend =0.15, size = 1, color = "red") +
geom_segment(x = q, xend = q, y = 0, yend = 0.15,
linetype = "dashed", color = "gray", size = 1) +
geom_point(data = tibble(x = c(q), y = c(0.15)),
aes(x = x, y = y), size = 5,color  = "gray") +
annotate("text", x = 1, y = 0.2, label = "H[0]",
size = 10, color = "blue", parse = T) +
annotate("text", x = 3.5, y = 0.2, label = "H[1]",
size = 10, color = "red", parse = T) +
annotate("text", x = 3.5, y = 0.075, label = "alpha", parse = T,
color = "gray", size = 10)
ggplot(dados) +
geom_line(aes(x = z, y = y), color = "black", size = 1) +
labs(x = TeX("$F_0$"), y = "Função densidade",
title = TeX("Rejeitamos $H_0: b = 0$ se $f_0 > f_{1-\\alpha; a-1, N-a}$"),
subtitle = bquote("RC = {" ~ f[0] ~ " | " ~ f[0] > f[1-alpha~";"~a-1~","~N-a] ~ "}"),
caption = bquote(f[0] == frac(QM[R], QM[E]))) +
scale_x_continuous(breaks = c(q),
labels = c(TeX("$f_{1-\\alpha; a-1, N-a}$"))) +
scale_y_continuous(breaks = NULL) +
geom_ribbon(data = dplyr::filter(dados, z > q),
aes(x = z, y = y, ymin = 0, ymax = y),
fill = "gray") +
theme_classic() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25),
title = element_text(size = 20)) +
geom_segment(x = -0.5, xend = q, y = 0.15, yend =0.15, size = 1, color = "blue") +
geom_segment(x = q, xend = xmax, y = 0.15, yend =0.15, size = 1, color = "red") +
geom_segment(x = q, xend = q, y = 0, yend = 0.15,
linetype = "dashed", color = "gray", size = 1) +
geom_point(data = tibble(x = c(q), y = c(0.15)),
aes(x = x, y = y), size = 5,color  = "gray") +
annotate("text", x = 1, y = 0.2, label = "H[0]",
size = 10, color = "blue", parse = T) +
annotate("text", x = 3.5, y = 0.2, label = "H[1]",
size = 10, color = "red", parse = T) +
annotate("text", x = 3.5, y = 0.075, label = "alpha", parse = T,
color = "gray", size = 10)
ggplot(dados) +
geom_line(aes(x = z, y = y), color = "black", size = 1) +
labs(x = TeX("$F_0$"), y = "Função densidade",
title = TeX("Rejeitamos $H_0: b = 0$ se $f_0 > f_{1-\\alpha; 1, N-2}$"),
subtitle = bquote("RC = {" ~ f[0] ~ " | " ~ f[0] > f[1-alpha~";"~1~","~N-2] ~ "}"),
caption = bquote(f[0] == frac(QM[R], QM[E]))) +
scale_x_continuous(breaks = c(q),
labels = c(TeX("$f_{1-\\alpha; 1, N-2}$"))) +
scale_y_continuous(breaks = NULL) +
geom_ribbon(data = dplyr::filter(dados, z > q),
aes(x = z, y = y, ymin = 0, ymax = y),
fill = "gray") +
theme_classic() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25),
title = element_text(size = 20)) +
geom_segment(x = -0.5, xend = q, y = 0.15, yend =0.15, size = 1, color = "blue") +
geom_segment(x = q, xend = xmax, y = 0.15, yend =0.15, size = 1, color = "red") +
geom_segment(x = q, xend = q, y = 0, yend = 0.15,
linetype = "dashed", color = "gray", size = 1) +
geom_point(data = tibble(x = c(q), y = c(0.15)),
aes(x = x, y = y), size = 5,color  = "gray") +
annotate("text", x = 1, y = 0.2, label = "H[0]",
size = 10, color = "blue", parse = T) +
annotate("text", x = 3.5, y = 0.2, label = "H[1]",
size = 10, color = "red", parse = T) +
annotate("text", x = 3.5, y = 0.075, label = "alpha", parse = T,
color = "gray", size = 10)
df1 = 4
df2 = 18
xmax <- 8
z <- seq(from = 0, to = xmax, by = 0.0001)
y <- df(z, df1 = df1, df2 = df2)
dados <- tibble(z = z, y = y)
a <- 0.05
q <- qf(1 - a, df1 = df1, df2 = df2)
ggplot(dados) +
geom_line(aes(x = z, y = y), color = "black", size = 1) +
labs(x = TeX("$F_0$"), y = "Função densidade",
title = TeX("Rejeitamos $H_0: b = 0$ se $f_0 > f_{1-\\alpha; 1, N-2}$"),
subtitle = bquote("RC = {" ~ f[0] ~ " | " ~ f[0] > f[1-alpha~";"~1~","~N-2] ~ "}"),
caption = bquote(f[0] == frac(QM[R], QM[E]))) +
scale_x_continuous(breaks = c(q),
labels = c(TeX("$f_{1-\\alpha; 1, N-2}$"))) +
scale_y_continuous(breaks = NULL) +
geom_ribbon(data = dplyr::filter(dados, z > q),
aes(x = z, y = y, ymin = 0, ymax = y),
fill = "gray") +
theme_classic() +
theme(axis.title = element_text(size = 30),
axis.text = element_text(size = 25),
title = element_text(size = 20)) +
geom_segment(x = -0.5, xend = q, y = 0.15, yend =0.15, size = 1, color = "blue") +
geom_segment(x = q, xend = xmax, y = 0.15, yend =0.15, size = 1, color = "red") +
geom_segment(x = q, xend = q, y = 0, yend = 0.15,
linetype = "dashed", color = "gray", size = 1) +
geom_point(data = tibble(x = c(q), y = c(0.15)),
aes(x = x, y = y), size = 5,color  = "gray") +
annotate("text", x = 1, y = 0.2, label = "H[0]",
size = 10, color = "blue", parse = T) +
annotate("text", x = 3.5, y = 0.2, label = "H[1]",
size = 10, color = "red", parse = T) +
annotate("text", x = 3.5, y = 0.075, label = "alpha", parse = T,
color = "gray", size = 10)
ggsave("../figure/anova.png")
ggsave("../figure/anova.pdf")
q()
library(xtable)
library(openxlsx)
library(readr)
library(readxl)
library(latex2exp)
library(tidyverse)
dados <- tribble(~forca, ~idade,
2158.70, 15.50,
1678.15, 23.75,
2316.00, 8.00,
2061.30, 17.00,
2207.50, 5.00,
1708.30, 19.00,
1784.70, 24.00,
2575.00, 2.50,
2357.90, 7.50,
2277.70, 11.00,
2165.20, 13.00,
2399.55, 3.75,
1779.80, 25.00,
2336.75, 9.75,
1765.30, 22.00,
2053.50, 18.00,
2414.40, 6.00,
2200.50, 12.50,
2654.20, 2.00,
1753.70, 21.50)
fit <- aov(forca ~ idade, data = dados)
summary(fit)
summary(fit) %>%
xtable()
summary(fit) %>%
xtable(digits = 2,
caption = "Tabela ANOVA para regressão linear simples.",
label = "tab:anova-reg") %>%
print.xtable(booktabs = T,
format.args = list(decimal.mark = ","))
dados <- tribble(~forca, ~idade,
2158.70, 15.50,
1678.15, 23.75,
2316.00, 8.00,
2061.30, 17.00,
2207.50, 5.00,
1708.30, 19.00,
1784.70, 24.00,
2575.00, 2.50,
2357.90, 7.50,
2277.70, 11.00,
2165.20, 13.00,
2399.55, 3.75,
1779.80, 25.00,
2336.75, 9.75,
1765.30, 22.00,
2053.50, 18.00,
2414.40, 6.00,
2200.50, 12.50,
2654.20, 2.00,
1753.70, 21.50)
mean(dados$idade)
